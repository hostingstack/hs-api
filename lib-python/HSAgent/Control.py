#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def heartbeat(self, deployment_install_token):
    """
    Parameters:
     - deployment_install_token
    """
    pass

  def snapshot_vm(self, deployment_install_token, log_name, first_start):
    """
    Parameters:
     - deployment_install_token
     - log_name
     - first_start
    """
    pass

  def stop_vm(self, deployment_install_token):
    """
    Parameters:
     - deployment_install_token
    """
    pass

  def start_vm_protocol(self, deployment_install_token, protocol):
    """
    Parameters:
     - deployment_install_token
     - protocol
    """
    pass

  def fetch_ssh_credentials(self, username, password):
    """
    Parameters:
     - username
     - password
    """
    pass

  def execute_app_command(self, deployment_install_token, log_name, command_name, command):
    """
    Parameters:
     - deployment_install_token
     - log_name
     - command_name
     - command
    """
    pass

  def gateway_routes_changed(self, ):
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def heartbeat(self, deployment_install_token):
    """
    Parameters:
     - deployment_install_token
    """
    self.send_heartbeat(deployment_install_token)
    self.recv_heartbeat()

  def send_heartbeat(self, deployment_install_token):
    self._oprot.writeMessageBegin('heartbeat', TMessageType.CALL, self._seqid)
    args = heartbeat_args()
    args.deployment_install_token = deployment_install_token
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_heartbeat(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = heartbeat_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    if result.ndf is not None:
      raise result.ndf
    return

  def snapshot_vm(self, deployment_install_token, log_name, first_start):
    """
    Parameters:
     - deployment_install_token
     - log_name
     - first_start
    """
    self.send_snapshot_vm(deployment_install_token, log_name, first_start)
    self.recv_snapshot_vm()

  def send_snapshot_vm(self, deployment_install_token, log_name, first_start):
    self._oprot.writeMessageBegin('snapshot_vm', TMessageType.CALL, self._seqid)
    args = snapshot_vm_args()
    args.deployment_install_token = deployment_install_token
    args.log_name = log_name
    args.first_start = first_start
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_snapshot_vm(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = snapshot_vm_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    if result.ndf is not None:
      raise result.ndf
    return

  def stop_vm(self, deployment_install_token):
    """
    Parameters:
     - deployment_install_token
    """
    self.send_stop_vm(deployment_install_token)
    self.recv_stop_vm()

  def send_stop_vm(self, deployment_install_token):
    self._oprot.writeMessageBegin('stop_vm', TMessageType.CALL, self._seqid)
    args = stop_vm_args()
    args.deployment_install_token = deployment_install_token
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_stop_vm(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = stop_vm_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    if result.ndf is not None:
      raise result.ndf
    return

  def start_vm_protocol(self, deployment_install_token, protocol):
    """
    Parameters:
     - deployment_install_token
     - protocol
    """
    self.send_start_vm_protocol(deployment_install_token, protocol)
    return self.recv_start_vm_protocol()

  def send_start_vm_protocol(self, deployment_install_token, protocol):
    self._oprot.writeMessageBegin('start_vm_protocol', TMessageType.CALL, self._seqid)
    args = start_vm_protocol_args()
    args.deployment_install_token = deployment_install_token
    args.protocol = protocol
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_start_vm_protocol(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = start_vm_protocol_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    if result.ndf is not None:
      raise result.ndf
    raise TApplicationException(TApplicationException.MISSING_RESULT, "start_vm_protocol failed: unknown result");

  def fetch_ssh_credentials(self, username, password):
    """
    Parameters:
     - username
     - password
    """
    self.send_fetch_ssh_credentials(username, password)
    return self.recv_fetch_ssh_credentials()

  def send_fetch_ssh_credentials(self, username, password):
    self._oprot.writeMessageBegin('fetch_ssh_credentials', TMessageType.CALL, self._seqid)
    args = fetch_ssh_credentials_args()
    args.username = username
    args.password = password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_fetch_ssh_credentials(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = fetch_ssh_credentials_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    if result.ae is not None:
      raise result.ae
    if result.ndf is not None:
      raise result.ndf
    raise TApplicationException(TApplicationException.MISSING_RESULT, "fetch_ssh_credentials failed: unknown result");

  def execute_app_command(self, deployment_install_token, log_name, command_name, command):
    """
    Parameters:
     - deployment_install_token
     - log_name
     - command_name
     - command
    """
    self.send_execute_app_command(deployment_install_token, log_name, command_name, command)
    self.recv_execute_app_command()

  def send_execute_app_command(self, deployment_install_token, log_name, command_name, command):
    self._oprot.writeMessageBegin('execute_app_command', TMessageType.CALL, self._seqid)
    args = execute_app_command_args()
    args.deployment_install_token = deployment_install_token
    args.log_name = log_name
    args.command_name = command_name
    args.command = command
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_execute_app_command(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = execute_app_command_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    if result.ndf is not None:
      raise result.ndf
    return

  def gateway_routes_changed(self, ):
    self.send_gateway_routes_changed()
    self.recv_gateway_routes_changed()

  def send_gateway_routes_changed(self, ):
    self._oprot.writeMessageBegin('gateway_routes_changed', TMessageType.CALL, self._seqid)
    args = gateway_routes_changed_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_gateway_routes_changed(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = gateway_routes_changed_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["heartbeat"] = Processor.process_heartbeat
    self._processMap["snapshot_vm"] = Processor.process_snapshot_vm
    self._processMap["stop_vm"] = Processor.process_stop_vm
    self._processMap["start_vm_protocol"] = Processor.process_start_vm_protocol
    self._processMap["fetch_ssh_credentials"] = Processor.process_fetch_ssh_credentials
    self._processMap["execute_app_command"] = Processor.process_execute_app_command
    self._processMap["gateway_routes_changed"] = Processor.process_gateway_routes_changed

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_heartbeat(self, seqid, iprot, oprot):
    args = heartbeat_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = heartbeat_result()
    try:
      self._handler.heartbeat(args.deployment_install_token)
    except Error, e:
      result.e = e
    except NoDeploymentFoundError, ndf:
      result.ndf = ndf
    oprot.writeMessageBegin("heartbeat", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_snapshot_vm(self, seqid, iprot, oprot):
    args = snapshot_vm_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = snapshot_vm_result()
    try:
      self._handler.snapshot_vm(args.deployment_install_token, args.log_name, args.first_start)
    except Error, e:
      result.e = e
    except NoDeploymentFoundError, ndf:
      result.ndf = ndf
    oprot.writeMessageBegin("snapshot_vm", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stop_vm(self, seqid, iprot, oprot):
    args = stop_vm_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stop_vm_result()
    try:
      self._handler.stop_vm(args.deployment_install_token)
    except Error, e:
      result.e = e
    except NoDeploymentFoundError, ndf:
      result.ndf = ndf
    oprot.writeMessageBegin("stop_vm", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_start_vm_protocol(self, seqid, iprot, oprot):
    args = start_vm_protocol_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = start_vm_protocol_result()
    try:
      result.success = self._handler.start_vm_protocol(args.deployment_install_token, args.protocol)
    except Error, e:
      result.e = e
    except NoDeploymentFoundError, ndf:
      result.ndf = ndf
    oprot.writeMessageBegin("start_vm_protocol", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_fetch_ssh_credentials(self, seqid, iprot, oprot):
    args = fetch_ssh_credentials_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = fetch_ssh_credentials_result()
    try:
      result.success = self._handler.fetch_ssh_credentials(args.username, args.password)
    except Error, e:
      result.e = e
    except AuthenticationError, ae:
      result.ae = ae
    except NoDeploymentFoundError, ndf:
      result.ndf = ndf
    oprot.writeMessageBegin("fetch_ssh_credentials", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_execute_app_command(self, seqid, iprot, oprot):
    args = execute_app_command_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = execute_app_command_result()
    try:
      self._handler.execute_app_command(args.deployment_install_token, args.log_name, args.command_name, args.command)
    except Error, e:
      result.e = e
    except NoDeploymentFoundError, ndf:
      result.ndf = ndf
    oprot.writeMessageBegin("execute_app_command", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_gateway_routes_changed(self, seqid, iprot, oprot):
    args = gateway_routes_changed_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = gateway_routes_changed_result()
    try:
      self._handler.gateway_routes_changed()
    except Error, e:
      result.e = e
    oprot.writeMessageBegin("gateway_routes_changed", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class heartbeat_args:
  """
  Attributes:
   - deployment_install_token
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'deployment_install_token', None, None, ), # 1
  )

  def __init__(self, deployment_install_token=None,):
    self.deployment_install_token = deployment_install_token

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.deployment_install_token = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('heartbeat_args')
    if self.deployment_install_token is not None:
      oprot.writeFieldBegin('deployment_install_token', TType.STRING, 1)
      oprot.writeString(self.deployment_install_token)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class heartbeat_result:
  """
  Attributes:
   - e
   - ndf
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'e', (Error, Error.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ndf', (NoDeploymentFoundError, NoDeploymentFoundError.thrift_spec), None, ), # 2
  )

  def __init__(self, e=None, ndf=None,):
    self.e = e
    self.ndf = ndf

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.e = Error()
          self.e.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ndf = NoDeploymentFoundError()
          self.ndf.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('heartbeat_result')
    if self.e is not None:
      oprot.writeFieldBegin('e', TType.STRUCT, 1)
      self.e.write(oprot)
      oprot.writeFieldEnd()
    if self.ndf is not None:
      oprot.writeFieldBegin('ndf', TType.STRUCT, 2)
      self.ndf.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class snapshot_vm_args:
  """
  Attributes:
   - deployment_install_token
   - log_name
   - first_start
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'deployment_install_token', None, None, ), # 1
    (2, TType.STRING, 'log_name', None, None, ), # 2
    (3, TType.BOOL, 'first_start', None, None, ), # 3
  )

  def __init__(self, deployment_install_token=None, log_name=None, first_start=None,):
    self.deployment_install_token = deployment_install_token
    self.log_name = log_name
    self.first_start = first_start

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.deployment_install_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.log_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.first_start = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('snapshot_vm_args')
    if self.deployment_install_token is not None:
      oprot.writeFieldBegin('deployment_install_token', TType.STRING, 1)
      oprot.writeString(self.deployment_install_token)
      oprot.writeFieldEnd()
    if self.log_name is not None:
      oprot.writeFieldBegin('log_name', TType.STRING, 2)
      oprot.writeString(self.log_name)
      oprot.writeFieldEnd()
    if self.first_start is not None:
      oprot.writeFieldBegin('first_start', TType.BOOL, 3)
      oprot.writeBool(self.first_start)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class snapshot_vm_result:
  """
  Attributes:
   - e
   - ndf
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'e', (Error, Error.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ndf', (NoDeploymentFoundError, NoDeploymentFoundError.thrift_spec), None, ), # 2
  )

  def __init__(self, e=None, ndf=None,):
    self.e = e
    self.ndf = ndf

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.e = Error()
          self.e.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ndf = NoDeploymentFoundError()
          self.ndf.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('snapshot_vm_result')
    if self.e is not None:
      oprot.writeFieldBegin('e', TType.STRUCT, 1)
      self.e.write(oprot)
      oprot.writeFieldEnd()
    if self.ndf is not None:
      oprot.writeFieldBegin('ndf', TType.STRUCT, 2)
      self.ndf.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stop_vm_args:
  """
  Attributes:
   - deployment_install_token
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'deployment_install_token', None, None, ), # 1
  )

  def __init__(self, deployment_install_token=None,):
    self.deployment_install_token = deployment_install_token

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.deployment_install_token = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stop_vm_args')
    if self.deployment_install_token is not None:
      oprot.writeFieldBegin('deployment_install_token', TType.STRING, 1)
      oprot.writeString(self.deployment_install_token)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stop_vm_result:
  """
  Attributes:
   - e
   - ndf
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'e', (Error, Error.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ndf', (NoDeploymentFoundError, NoDeploymentFoundError.thrift_spec), None, ), # 2
  )

  def __init__(self, e=None, ndf=None,):
    self.e = e
    self.ndf = ndf

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.e = Error()
          self.e.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ndf = NoDeploymentFoundError()
          self.ndf.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stop_vm_result')
    if self.e is not None:
      oprot.writeFieldBegin('e', TType.STRUCT, 1)
      self.e.write(oprot)
      oprot.writeFieldEnd()
    if self.ndf is not None:
      oprot.writeFieldBegin('ndf', TType.STRUCT, 2)
      self.ndf.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class start_vm_protocol_args:
  """
  Attributes:
   - deployment_install_token
   - protocol
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'deployment_install_token', None, None, ), # 1
    (2, TType.STRING, 'protocol', None, None, ), # 2
  )

  def __init__(self, deployment_install_token=None, protocol=None,):
    self.deployment_install_token = deployment_install_token
    self.protocol = protocol

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.deployment_install_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.protocol = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('start_vm_protocol_args')
    if self.deployment_install_token is not None:
      oprot.writeFieldBegin('deployment_install_token', TType.STRING, 1)
      oprot.writeString(self.deployment_install_token)
      oprot.writeFieldEnd()
    if self.protocol is not None:
      oprot.writeFieldBegin('protocol', TType.STRING, 2)
      oprot.writeString(self.protocol)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class start_vm_protocol_result:
  """
  Attributes:
   - success
   - e
   - ndf
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'e', (Error, Error.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ndf', (NoDeploymentFoundError, NoDeploymentFoundError.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, e=None, ndf=None,):
    self.success = success
    self.e = e
    self.ndf = ndf

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.e = Error()
          self.e.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ndf = NoDeploymentFoundError()
          self.ndf.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('start_vm_protocol_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.e is not None:
      oprot.writeFieldBegin('e', TType.STRUCT, 1)
      self.e.write(oprot)
      oprot.writeFieldEnd()
    if self.ndf is not None:
      oprot.writeFieldBegin('ndf', TType.STRUCT, 2)
      self.ndf.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class fetch_ssh_credentials_args:
  """
  Attributes:
   - username
   - password
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'password', None, None, ), # 2
  )

  def __init__(self, username=None, password=None,):
    self.username = username
    self.password = password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('fetch_ssh_credentials_args')
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 2)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class fetch_ssh_credentials_result:
  """
  Attributes:
   - success
   - e
   - ae
   - ndf
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (SSHCredentials, SSHCredentials.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'e', (Error, Error.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (AuthenticationError, AuthenticationError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ndf', (NoDeploymentFoundError, NoDeploymentFoundError.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, e=None, ae=None, ndf=None,):
    self.success = success
    self.e = e
    self.ae = ae
    self.ndf = ndf

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = SSHCredentials()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.e = Error()
          self.e.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = AuthenticationError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ndf = NoDeploymentFoundError()
          self.ndf.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('fetch_ssh_credentials_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.e is not None:
      oprot.writeFieldBegin('e', TType.STRUCT, 1)
      self.e.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ndf is not None:
      oprot.writeFieldBegin('ndf', TType.STRUCT, 3)
      self.ndf.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class execute_app_command_args:
  """
  Attributes:
   - deployment_install_token
   - log_name
   - command_name
   - command
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'deployment_install_token', None, None, ), # 1
    (2, TType.STRING, 'log_name', None, None, ), # 2
    (3, TType.STRING, 'command_name', None, None, ), # 3
    (4, TType.STRING, 'command', None, None, ), # 4
  )

  def __init__(self, deployment_install_token=None, log_name=None, command_name=None, command=None,):
    self.deployment_install_token = deployment_install_token
    self.log_name = log_name
    self.command_name = command_name
    self.command = command

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.deployment_install_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.log_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.command_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.command = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('execute_app_command_args')
    if self.deployment_install_token is not None:
      oprot.writeFieldBegin('deployment_install_token', TType.STRING, 1)
      oprot.writeString(self.deployment_install_token)
      oprot.writeFieldEnd()
    if self.log_name is not None:
      oprot.writeFieldBegin('log_name', TType.STRING, 2)
      oprot.writeString(self.log_name)
      oprot.writeFieldEnd()
    if self.command_name is not None:
      oprot.writeFieldBegin('command_name', TType.STRING, 3)
      oprot.writeString(self.command_name)
      oprot.writeFieldEnd()
    if self.command is not None:
      oprot.writeFieldBegin('command', TType.STRING, 4)
      oprot.writeString(self.command)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class execute_app_command_result:
  """
  Attributes:
   - e
   - ndf
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'e', (Error, Error.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ndf', (NoDeploymentFoundError, NoDeploymentFoundError.thrift_spec), None, ), # 2
  )

  def __init__(self, e=None, ndf=None,):
    self.e = e
    self.ndf = ndf

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.e = Error()
          self.e.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ndf = NoDeploymentFoundError()
          self.ndf.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('execute_app_command_result')
    if self.e is not None:
      oprot.writeFieldBegin('e', TType.STRUCT, 1)
      self.e.write(oprot)
      oprot.writeFieldEnd()
    if self.ndf is not None:
      oprot.writeFieldBegin('ndf', TType.STRUCT, 2)
      self.ndf.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class gateway_routes_changed_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('gateway_routes_changed_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class gateway_routes_changed_result:
  """
  Attributes:
   - e
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'e', (Error, Error.thrift_spec), None, ), # 1
  )

  def __init__(self, e=None,):
    self.e = e

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.e = Error()
          self.e.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('gateway_routes_changed_result')
    if self.e is not None:
      oprot.writeFieldBegin('e', TType.STRUCT, 1)
      self.e.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
