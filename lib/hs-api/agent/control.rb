#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'agent/types'

    module HSAgent
      module Control
        class Client
          include ::Thrift::Client

          def heartbeat(deployment_install_token)
            send_heartbeat(deployment_install_token)
            recv_heartbeat()
          end

          def send_heartbeat(deployment_install_token)
            send_message('heartbeat', Heartbeat_args, :deployment_install_token => deployment_install_token)
          end

          def recv_heartbeat()
            result = receive_message(Heartbeat_result)
            raise result.e unless result.e.nil?
            raise result.ndf unless result.ndf.nil?
            return
          end

          def snapshot_vm(deployment_install_token, log_name, first_start)
            send_snapshot_vm(deployment_install_token, log_name, first_start)
            recv_snapshot_vm()
          end

          def send_snapshot_vm(deployment_install_token, log_name, first_start)
            send_message('snapshot_vm', Snapshot_vm_args, :deployment_install_token => deployment_install_token, :log_name => log_name, :first_start => first_start)
          end

          def recv_snapshot_vm()
            result = receive_message(Snapshot_vm_result)
            raise result.e unless result.e.nil?
            raise result.ndf unless result.ndf.nil?
            return
          end

          def stop_vm(deployment_install_token)
            send_stop_vm(deployment_install_token)
            recv_stop_vm()
          end

          def send_stop_vm(deployment_install_token)
            send_message('stop_vm', Stop_vm_args, :deployment_install_token => deployment_install_token)
          end

          def recv_stop_vm()
            result = receive_message(Stop_vm_result)
            raise result.e unless result.e.nil?
            raise result.ndf unless result.ndf.nil?
            return
          end

          def start_vm_protocol(deployment_install_token, protocol)
            send_start_vm_protocol(deployment_install_token, protocol)
            return recv_start_vm_protocol()
          end

          def send_start_vm_protocol(deployment_install_token, protocol)
            send_message('start_vm_protocol', Start_vm_protocol_args, :deployment_install_token => deployment_install_token, :protocol => protocol)
          end

          def recv_start_vm_protocol()
            result = receive_message(Start_vm_protocol_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise result.ndf unless result.ndf.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'start_vm_protocol failed: unknown result')
          end

          def fetch_ssh_credentials(username, password)
            send_fetch_ssh_credentials(username, password)
            return recv_fetch_ssh_credentials()
          end

          def send_fetch_ssh_credentials(username, password)
            send_message('fetch_ssh_credentials', Fetch_ssh_credentials_args, :username => username, :password => password)
          end

          def recv_fetch_ssh_credentials()
            result = receive_message(Fetch_ssh_credentials_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise result.ae unless result.ae.nil?
            raise result.ndf unless result.ndf.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetch_ssh_credentials failed: unknown result')
          end

          def execute_app_command(deployment_install_token, log_name, command_name, command)
            send_execute_app_command(deployment_install_token, log_name, command_name, command)
            recv_execute_app_command()
          end

          def send_execute_app_command(deployment_install_token, log_name, command_name, command)
            send_message('execute_app_command', Execute_app_command_args, :deployment_install_token => deployment_install_token, :log_name => log_name, :command_name => command_name, :command => command)
          end

          def recv_execute_app_command()
            result = receive_message(Execute_app_command_result)
            raise result.e unless result.e.nil?
            raise result.ndf unless result.ndf.nil?
            return
          end

          def gateway_routes_changed()
            send_gateway_routes_changed()
            recv_gateway_routes_changed()
          end

          def send_gateway_routes_changed()
            send_message('gateway_routes_changed', Gateway_routes_changed_args)
          end

          def recv_gateway_routes_changed()
            result = receive_message(Gateway_routes_changed_result)
            raise result.e unless result.e.nil?
            return
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_heartbeat(seqid, iprot, oprot)
            args = read_args(iprot, Heartbeat_args)
            result = Heartbeat_result.new()
            begin
              @handler.heartbeat(args.deployment_install_token)
            rescue HSAgent::Error => e
              result.e = e
            rescue HSAgent::NoDeploymentFoundError => ndf
              result.ndf = ndf
            end
            write_result(result, oprot, 'heartbeat', seqid)
          end

          def process_snapshot_vm(seqid, iprot, oprot)
            args = read_args(iprot, Snapshot_vm_args)
            result = Snapshot_vm_result.new()
            begin
              @handler.snapshot_vm(args.deployment_install_token, args.log_name, args.first_start)
            rescue HSAgent::Error => e
              result.e = e
            rescue HSAgent::NoDeploymentFoundError => ndf
              result.ndf = ndf
            end
            write_result(result, oprot, 'snapshot_vm', seqid)
          end

          def process_stop_vm(seqid, iprot, oprot)
            args = read_args(iprot, Stop_vm_args)
            result = Stop_vm_result.new()
            begin
              @handler.stop_vm(args.deployment_install_token)
            rescue HSAgent::Error => e
              result.e = e
            rescue HSAgent::NoDeploymentFoundError => ndf
              result.ndf = ndf
            end
            write_result(result, oprot, 'stop_vm', seqid)
          end

          def process_start_vm_protocol(seqid, iprot, oprot)
            args = read_args(iprot, Start_vm_protocol_args)
            result = Start_vm_protocol_result.new()
            begin
              result.success = @handler.start_vm_protocol(args.deployment_install_token, args.protocol)
            rescue HSAgent::Error => e
              result.e = e
            rescue HSAgent::NoDeploymentFoundError => ndf
              result.ndf = ndf
            end
            write_result(result, oprot, 'start_vm_protocol', seqid)
          end

          def process_fetch_ssh_credentials(seqid, iprot, oprot)
            args = read_args(iprot, Fetch_ssh_credentials_args)
            result = Fetch_ssh_credentials_result.new()
            begin
              result.success = @handler.fetch_ssh_credentials(args.username, args.password)
            rescue HSAgent::Error => e
              result.e = e
            rescue HSAgent::AuthenticationError => ae
              result.ae = ae
            rescue HSAgent::NoDeploymentFoundError => ndf
              result.ndf = ndf
            end
            write_result(result, oprot, 'fetch_ssh_credentials', seqid)
          end

          def process_execute_app_command(seqid, iprot, oprot)
            args = read_args(iprot, Execute_app_command_args)
            result = Execute_app_command_result.new()
            begin
              @handler.execute_app_command(args.deployment_install_token, args.log_name, args.command_name, args.command)
            rescue HSAgent::Error => e
              result.e = e
            rescue HSAgent::NoDeploymentFoundError => ndf
              result.ndf = ndf
            end
            write_result(result, oprot, 'execute_app_command', seqid)
          end

          def process_gateway_routes_changed(seqid, iprot, oprot)
            args = read_args(iprot, Gateway_routes_changed_args)
            result = Gateway_routes_changed_result.new()
            begin
              @handler.gateway_routes_changed()
            rescue HSAgent::Error => e
              result.e = e
            end
            write_result(result, oprot, 'gateway_routes_changed', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Heartbeat_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          DEPLOYMENT_INSTALL_TOKEN = 1

          FIELDS = {
            DEPLOYMENT_INSTALL_TOKEN => {:type => ::Thrift::Types::STRING, :name => 'deployment_install_token'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Heartbeat_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1
          NDF = 2

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => HSAgent::Error},
            NDF => {:type => ::Thrift::Types::STRUCT, :name => 'ndf', :class => HSAgent::NoDeploymentFoundError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Snapshot_vm_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          DEPLOYMENT_INSTALL_TOKEN = 1
          LOG_NAME = 2
          FIRST_START = 3

          FIELDS = {
            DEPLOYMENT_INSTALL_TOKEN => {:type => ::Thrift::Types::STRING, :name => 'deployment_install_token'},
            LOG_NAME => {:type => ::Thrift::Types::STRING, :name => 'log_name'},
            FIRST_START => {:type => ::Thrift::Types::BOOL, :name => 'first_start'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Snapshot_vm_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1
          NDF = 2

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => HSAgent::Error},
            NDF => {:type => ::Thrift::Types::STRUCT, :name => 'ndf', :class => HSAgent::NoDeploymentFoundError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Stop_vm_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          DEPLOYMENT_INSTALL_TOKEN = 1

          FIELDS = {
            DEPLOYMENT_INSTALL_TOKEN => {:type => ::Thrift::Types::STRING, :name => 'deployment_install_token'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Stop_vm_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1
          NDF = 2

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => HSAgent::Error},
            NDF => {:type => ::Thrift::Types::STRUCT, :name => 'ndf', :class => HSAgent::NoDeploymentFoundError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Start_vm_protocol_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          DEPLOYMENT_INSTALL_TOKEN = 1
          PROTOCOL = 2

          FIELDS = {
            DEPLOYMENT_INSTALL_TOKEN => {:type => ::Thrift::Types::STRING, :name => 'deployment_install_token'},
            PROTOCOL => {:type => ::Thrift::Types::STRING, :name => 'protocol'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Start_vm_protocol_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1
          NDF = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => HSAgent::Error},
            NDF => {:type => ::Thrift::Types::STRUCT, :name => 'ndf', :class => HSAgent::NoDeploymentFoundError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Fetch_ssh_credentials_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USERNAME = 1
          PASSWORD = 2

          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Fetch_ssh_credentials_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1
          AE = 2
          NDF = 3

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => HSAgent::SSHCredentials},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => HSAgent::Error},
            AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => HSAgent::AuthenticationError},
            NDF => {:type => ::Thrift::Types::STRUCT, :name => 'ndf', :class => HSAgent::NoDeploymentFoundError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Execute_app_command_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          DEPLOYMENT_INSTALL_TOKEN = 1
          LOG_NAME = 2
          COMMAND_NAME = 3
          COMMAND = 4

          FIELDS = {
            DEPLOYMENT_INSTALL_TOKEN => {:type => ::Thrift::Types::STRING, :name => 'deployment_install_token'},
            LOG_NAME => {:type => ::Thrift::Types::STRING, :name => 'log_name'},
            COMMAND_NAME => {:type => ::Thrift::Types::STRING, :name => 'command_name'},
            COMMAND => {:type => ::Thrift::Types::STRING, :name => 'command'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Execute_app_command_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1
          NDF = 2

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => HSAgent::Error},
            NDF => {:type => ::Thrift::Types::STRUCT, :name => 'ndf', :class => HSAgent::NoDeploymentFoundError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Gateway_routes_changed_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Gateway_routes_changed_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => HSAgent::Error}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
